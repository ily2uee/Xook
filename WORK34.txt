local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

local character = player.Character or player.CharacterAdded:Wait()
if not character then
    warn("Failed to load player character")
    return
end
local humanoid = character:FindFirstChild("Humanoid")
local root = character:FindFirstChild("HumanoidRootPart")
if not (humanoid and root) then
    warn("Humanoid or HumanoidRootPart not found")
    return
end

-- Settings file management
local settingsFileName = "NHSettings.json"
local HttpService = game:GetService("HttpService")

local defaultSettings = {
    walkspeedEnabled = false,
    currentWalkSpeed = 80,
    infiniteJumpEnabled = false,
    boostJumpEnabled = false,
    currentBoostStrength = 150,
    espEnabled = false,
    timerEspEnabled = false,
    webSlingerAutoAimEnabled = false,
    antiTrapEnabled = false,
    antiHitEnabled = false,
    brainrotEspEnabled = false,
    snipeTurretsEnabled = false,
    autoKickEnabled = false,
    antiRagdollEnabled = false,
    guiOpen = false,
    guiPosition = {0.5, -330, 0.5, -117}
}

local function saveSettings(settings)
    local success, result = pcall(function()
        local jsonString = HttpService:JSONEncode(settings)
        writefile(settingsFileName, jsonString)
    end)
    if not success then
        warn("Failed to save settings: " .. tostring(result))
    end
end

local function loadSettings()
    if isfile(settingsFileName) then
        local jsonString = readfile(settingsFileName)
        local decoded = HttpService:JSONDecode(jsonString)
        for key, value in pairs(defaultSettings) do
            if decoded[key] == nil then
                decoded[key] = value
            end
        end
        return decoded
    else
        warn("Settings file not found, using default settings.")
        return defaultSettings
    end
end

local settings = loadSettings()

local oldGui = PlayerGui:FindFirstChild("NamelessHubGui")
if oldGui then oldGui:Destroy() end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "NamelessHubGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = PlayerGui

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 50, 0, 50)
mainFrame.Position = UDim2.new(settings.guiPosition[1], settings.guiPosition[2], settings.guiPosition[3], settings.guiPosition[4])
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

local mainCorner = Instance.new("UICorner", mainFrame)
mainCorner.CornerRadius = UDim.new(0, 12)

local nhLabel = Instance.new("TextLabel")
nhLabel.Name = "NHLabel"
nhLabel.Size = UDim2.new(0, 50, 0, 50)
nhLabel.Position = UDim2.new(0, 0, 0, 0)
nhLabel.BackgroundTransparency = 1
nhLabel.Text = "NH"
nhLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
nhLabel.TextScaled = true
nhLabel.Font = Enum.Font.GothamBold
nhLabel.TextXAlignment = Enum.TextXAlignment.Center
nhLabel.TextYAlignment = Enum.TextYAlignment.Center
nhLabel.Parent = mainFrame

local hubLabel = Instance.new("TextLabel")
hubLabel.Size = UDim2.new(0, 50, 0, 20)
hubLabel.Position = UDim2.new(0, 0, 0, 30)
hubLabel.BackgroundTransparency = 1
hubLabel.Text = "Hub"
hubLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
hubLabel.TextScaled = true
hubLabel.Font = Enum.Font.GothamBold
hubLabel.TextTransparency = 1
hubLabel.Visible = false
hubLabel.Parent = mainFrame

local openButton = Instance.new("TextButton")
openButton.Size = UDim2.new(1, 0, 1, 0)
openButton.BackgroundTransparency = 1
openButton.Text = ""
openButton.Parent = mainFrame

local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
closeButton.Text = "✕"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextScaled = true
closeButton.Font = Enum.Font.GothamBold
closeButton.Visible = false
closeButton.BackgroundTransparency = 1
closeButton.TextTransparency = 1
closeButton.Parent = mainFrame

local closeCorner = Instance.new("UICorner", closeButton)
closeCorner.CornerRadius = UDim.new(1, 0)

-- State variables
local walkspeedEnabled = settings.walkspeedEnabled
local walkspeedConnection = nil
local snipeTurretsEnabled = settings.snipeTurretsEnabled
local snipeTurretsConnection = nil
local originalToolProperties = nil
local espEnabled = settings.espEnabled
local espConnections = {}
local espBillboards = {}
local timerEspEnabled = settings.timerEspEnabled
local activeConnections = {}
local webSlingerAutoAimEnabled = settings.webSlingerAutoAimEnabled
local webSlingerConnection = nil
local infiniteJumpEnabled = settings.infiniteJumpEnabled
local infiniteJumpConnection = nil
local boostJumpEnabled = settings.boostJumpEnabled
local boostJumpConnections = {}
local currentWalkSpeed = settings.currentWalkSpeed
local currentBoostStrength = settings.currentBoostStrength
local antiTrapEnabled = settings.antiTrapEnabled
local antiTrapConnection = nil
local antiHitEnabled = settings.antiHitEnabled
local antiHitConnection = nil -- Moved to global scope
local brainrotEspEnabled = settings.brainrotEspEnabled
local autoKickEnabled = settings.autoKickEnabled
local autoKickConnection = nil
local antiRagdollEnabled = settings.antiRagdollEnabled
local antiRagdollConnection = nil

-- Anti Ragdoll setup
local Camera = workspace.CurrentCamera
local playerModule = require(player:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule"))
local controls = playerModule:GetControls()
local RAGDOLL_SPEED = 20

local function setupAntiFlyRagdoll(char)
    if not antiRagdollEnabled then return end
    local humanoid = char:WaitForChild("Humanoid")
    local root = char:WaitForChild("HumanoidRootPart")
    local head = char:WaitForChild("Head")

    local bodyPosition
    local moveConnection

    local ragdollRemote = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Ragdoll"):WaitForChild("Ragdoll")

    ragdollRemote.OnClientEvent:Connect(function(p1, p2)
        if p1 == "Make" or p2 == "manualM" then
            print("[Anti-Fly Ragdoll] Ragdoll активирован (Freefall + высокая скорость)")
            humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
            Camera.CameraSubject = head
            root.CanCollide = false
            controls:Enable()

            if not bodyPosition then
                bodyPosition = Instance.new("BodyPosition")
                bodyPosition.Name = "RagdollAnchor"
                bodyPosition.MaxForce = Vector3.new(1e6, 1e6, 1e6)
                bodyPosition.P = 5000
                bodyPosition.D = 1000
                bodyPosition.Position = root.Position
                bodyPosition.Parent = root

                moveConnection = RunService.RenderStepped:Connect(function()
                    local moveDir = humanoid.MoveDirection
                    if moveDir.Magnitude > 0 then
                        bodyPosition.Position = root.Position + moveDir.Unit * RAGDOLL_SPEED
                    else
                        bodyPosition.Position = root.Position
                    end
                end)
            end
        end

        if p1 == "Destroy" or p2 == "manualD" then
            print("[Anti-Fly Ragdoll] Выход из Ragdoll")
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            Camera.CameraSubject = humanoid
            root.CanCollide = true

            if bodyPosition then
                bodyPosition:Destroy()
                bodyPosition = nil
            end
            if moveConnection then
                moveConnection:Disconnect()
                moveConnection = nil
            end

            controls:Enable()
        end
    end)
end

if settings.antiRagdollEnabled then
    antiRagdollConnection = player.CharacterAdded:Connect(setupAntiFlyRagdoll)
    if player.Character then
        setupAntiFlyRagdoll(player.Character)
    end
end

local function createTabButton(name, yOffset)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.3, -10, 0, 40)
    button.Position = UDim2.new(0, 5, 0, yOffset)
    button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    button.Text = name
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 18
    button.Font = Enum.Font.GothamBold
    button.BorderSizePixel = 0
    button.Visible = false
    button.BackgroundTransparency = 1
    button.TextTransparency = 1
    button.Parent = mainFrame

    local corner = Instance.new("UICorner", button)
    corner.CornerRadius = UDim.new(0, 8)

    button.MouseButton1Down:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
    end)
    button.MouseButton1Up:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
    end)

    return button
end

local tabMain = createTabButton("Main", 90)
local tabSettings = createTabButton("Settings", 140)
local tabESP = createTabButton("ESP", 190)
local tabInfo = createTabButton("Info", 240)

local divider = Instance.new("Frame")
divider.Size = UDim2.new(0, 2, 1, -20)
divider.Position = UDim2.new(0.3, 0, 0, 10)
divider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
divider.BackgroundTransparency = 1
divider.BorderSizePixel = 0
divider.Visible = false
divider.Parent = mainFrame

local tabContents = {}

local function disableWalkspeed(actionButton)
    if walkspeedConnection then
        walkspeedConnection:Disconnect()
        walkspeedConnection = nil
    end
    local character = player.Character
    if character then
        local root = character:FindFirstChild("HumanoidRootPart")
        if root then
            local vectorForce = root:FindFirstChild("ConstantMoveForce")
            if vectorForce then vectorForce:Destroy() end
            local attachment = root:FindFirstChildOfClass("Attachment")
            if attachment then attachment:Destroy() end
        end
    end
    walkspeedEnabled = false
    settings.walkspeedEnabled = false
    saveSettings(settings)
    if actionButton then
        actionButton.Text = "Enable Walkspeed"
        actionButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
end

local function enableWalkspeed(actionButton, speedTextBox, showNotification)
    if walkspeedConnection then
        walkspeedConnection:Disconnect()
        walkspeedConnection = nil
    end
    local character = player.Character
    if character then
        local root = character:FindFirstChild("HumanoidRootPart")
        if root then
            local vectorForce = root:FindFirstChild("ConstantMoveForce")
            if vectorForce then vectorForce:Destroy() end
            local attachment = root:FindFirstChildOfClass("Attachment")
            if attachment then attachment:Destroy() end
        end
    end
    character = player.Character or player.CharacterAdded:Wait()
    local root = character:WaitForChild("HumanoidRootPart")
    local humanoid = character:WaitForChild("Humanoid")

    local FORCE_MULTIPLIER = 100
    local AIR_DRAG = 0.9

    local function tryEquipAndUseTool()
        local tool = player.Backpack:FindFirstChild("Invisibility Cloak") or (player.Character and player.Character:FindFirstChild("Invisibility Cloak"))
        if tool and tool:IsA("Tool") then
            if tool.Parent ~= character then
                tool.Parent = character
                task.wait(0.1)
            end
            tool:Activate()
        else
            StarterGui:SetCore("SendNotification", {
                Title = "Tool Not Found",
                Text = "You don't have Invisibility Cloak in your backpack or equipped!",
                Duration = 5
            })
        end
    end

    tryEquipAndUseTool()

    local attachment = Instance.new("Attachment", root)
    local vectorForce = Instance.new("VectorForce")
    vectorForce.Name = "ConstantMoveForce"
    vectorForce.Attachment0 = attachment
    vectorForce.RelativeTo = Enum.ActuatorRelativeTo.World
    vectorForce.ApplyAtCenterOfMass = true
    vectorForce.Force = Vector3.zero
    vectorForce.Parent = root

    walkspeedConnection = RunService.RenderStepped:Connect(function()
        local moveDir = humanoid.MoveDirection
        if moveDir.Magnitude > 0 then
            local targetVelocity = moveDir.Unit * currentWalkSpeed
            local currentVelocity = root.Velocity
            local flatVelocity = Vector3.new(currentVelocity.X, 0, currentVelocity.Z)
            local diff = targetVelocity - flatVelocity
            local corrected = diff * FORCE_MULTIPLIER - flatVelocity * AIR_DRAG
            vectorForce.Force = Vector3.new(corrected.X, 0, corrected.Z)
        else
            vectorForce.Force = Vector3.zero
        end
    end)

    walkspeedEnabled = true
    settings.walkspeedEnabled = true
    saveSettings(settings)
    if actionButton then
        actionButton.Text = "Disable Walkspeed"
        actionButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Walkspeed", Text = "Walkspeed: ON", Duration = 2})
    end
end

local function updateWalkspeed(newSpeed)
    currentWalkSpeed = newSpeed
    settings.currentWalkSpeed = newSpeed
    saveSettings(settings)
end

local function enableAntiTrap(antiTrapButton, showNotification)
    if antiTrapConnection then
        antiTrapConnection:Disconnect()
        antiTrapConnection = nil
    end
    antiTrapEnabled = true
    if antiTrapButton then
        antiTrapButton.Text = "Disable Anti Trap"
        antiTrapButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Anti Trap", Text = "Anti Trap: ON", Duration = 2})
    end

    antiTrapConnection = RunService.Heartbeat:Connect(function()
        local trap = Workspace:FindFirstChild("Trap")
        if trap and trap:IsA("Model") then
            trap:Destroy()
        end
    end)
    
    settings.antiTrapEnabled = true
    saveSettings(settings)
end

local function disableAntiTrap(antiTrapButton, showNotification)
    if antiTrapConnection then
        antiTrapConnection:Disconnect()
        antiTrapConnection = nil
    end
    antiTrapEnabled = false
    if antiTrapButton then
        antiTrapButton.Text = "Enable Anti Trap"
        antiTrapButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Anti Trap", Text = "Anti Trap: OFF", Duration = 2})
    end
    
    settings.antiTrapEnabled = false
    saveSettings(settings)
end

local function getRandomColor()
    local function pickComponent()
        return math.random(180, 255)
    end
    local r, g, b = pickComponent(), pickComponent(), pickComponent()
    local drop = math.random(1, 3)
    if drop == 1 then r = math.random(30, 100)
    elseif drop == 2 then g = math.random(30, 100)
    else b = math.random(30, 100)
    end
    return Color3.fromRGB(r, g, b)
end

local function enableESP(espButton, showNotification)
    for _, targetPlayer in pairs(Players:GetPlayers()) do
        if targetPlayer ~= player and targetPlayer.Character then
            local bodyPart = targetPlayer.Character:FindFirstChild("ESPBodyPart")
            if bodyPart then bodyPart:Destroy() end
            local billboard = espBillboards[targetPlayer]
            if billboard then
                billboard:Destroy()
                espBillboards[targetPlayer] = nil
            end
        end
    end
    for _, connection in pairs(espConnections) do
        connection:Disconnect()
    end
    espConnections = {}
    espEnabled = true
    if espButton then
        espButton.Text = "Disable ESP"
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "ESP", Text = "ESP: ON", Duration = 2})
    end

    local function addHighlightAndName(targetPlayer)
        if targetPlayer ~= player and targetPlayer.Character then
            local randomColor = getRandomColor()
            local humanoidRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            local head = targetPlayer.Character:FindFirstChild("Head")
            if not (humanoidRoot and head) then return end

            -- Create Part for the entire body
            local bodyPart = Instance.new("Part")
            bodyPart.Name = "ESPBodyPart"
            bodyPart.Size = Vector3.new(4, 6, 4)
            bodyPart.Position = humanoidRoot.Position
            bodyPart.Transparency = 0.5
            bodyPart.Anchored = true
            bodyPart.CanCollide = false
            bodyPart.Massless = true
            bodyPart.Parent = targetPlayer.Character

            local highlight = Instance.new("Highlight")
            highlight.Name = "ESPBodyHighlight"
            highlight.FillColor = randomColor
            highlight.OutlineColor = randomColor
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Adornee = bodyPart
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Parent = bodyPart

            local connection = RunService.RenderStepped:Connect(function()
                if not (targetPlayer.Character and humanoidRoot and bodyPart) then
                    connection:Disconnect()
                    return
                end
                bodyPart.Position = humanoidRoot.Position
            end)
            table.insert(espConnections, connection)

            -- BillboardGui for name
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESPName"
            billboard.Adornee = head
            billboard.Size = UDim2.new(0, 100, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 2, 0)
            billboard.AlwaysOnTop = true
            billboard.Parent = targetPlayer.Character

            local nameLabel = Instance.new("TextLabel")
            nameLabel.Size = UDim2.new(1, 0, 1, 0)
            nameLabel.BackgroundTransparency = 1
            nameLabel.Text = targetPlayer.DisplayName ~= "" and targetPlayer.DisplayName or targetPlayer.Name
            nameLabel.TextColor3 = randomColor
            nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0) -- Чёрная обводка
            nameLabel.TextStrokeTransparency = 0
            nameLabel.TextScaled = true
            nameLabel.Font = Enum.Font.GothamBold
            nameLabel.Parent = billboard

            espBillboards[targetPlayer] = billboard
        end
    end

    for _, targetPlayer in pairs(Players:GetPlayers()) do
        addHighlightAndName(targetPlayer)
    end

    espConnections["PlayerAdded"] = Players.PlayerAdded:Connect(function(targetPlayer)
        targetPlayer.CharacterAdded:Connect(function()
            addHighlightAndName(targetPlayer)
        end)
    end)

    espConnections["PlayerRemoving"] = Players.PlayerRemoving:Connect(function(targetPlayer)
        if targetPlayer.Character then
            local bodyPart = targetPlayer.Character:FindFirstChild("ESPBodyPart")
            if bodyPart then bodyPart:Destroy() end
            local billboard = espBillboards[targetPlayer]
            if billboard then
                billboard:Destroy()
                espBillboards[targetPlayer] = nil
            end
        end
    end)

    settings.espEnabled = true
    saveSettings(settings)
end

local function disableESP(espButton, showNotification)
    espEnabled = false
    if espButton then
        espButton.Text = "Enable ESP"
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "ESP", Text = "ESP: OFF", Duration = 2})
    end

    for _, targetPlayer in pairs(Players:GetPlayers()) do
        if targetPlayer ~= player and targetPlayer.Character then
            local bodyPart = targetPlayer.Character:FindFirstChild("ESPBodyPart")
            if bodyPart then bodyPart:Destroy() end
            local billboard = espBillboards[targetPlayer]
            if billboard then
                billboard:Destroy()
                espBillboards[targetPlayer] = nil
            end
        end
    end

    for _, connection in pairs(espConnections) do
        connection:Disconnect()
    end
    espConnections = {}

    settings.espEnabled = false
    saveSettings(settings)
end

local function updateBillboard(mainPart, contentText, shouldShow)
    local existing = mainPart:FindFirstChild("RemainingTimeGui")
    if shouldShow then
        if not existing then
            local gui = Instance.new("BillboardGui")
            gui.Name = "RemainingTimeGui"
            gui.Adornee = mainPart
            gui.Size = UDim2.new(0, 200, 0, 50)
            gui.StudsOffset = Vector3.new(0, 5, 0)
            gui.AlwaysOnTop = true
            gui.Parent = mainPart

            local label = Instance.new("TextLabel")
            label.Name = "Text"
            label.Size = UDim2.new(1, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextScaled = true
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.TextStrokeTransparency = 0.2
            label.Font = Enum.Font.GothamBold
            label.Text = contentText
            label.Parent = gui
        else
            local label = existing:FindFirstChild("Text")
            if label then
                label.Text = contentText
            end
        end
    else
        if existing then
            existing:Destroy()
        end
    end
end

local function findLowestValidRemainingTime(purchases)
    local lowest = nil
    local lowestY = nil

    for _, purchase in pairs(purchases:GetChildren()) do
        local main = purchase:FindFirstChild("Main")
        local gui = main and main:FindFirstChild("BillboardGui")
        local remTime = gui and gui:FindFirstChild("RemainingTime")
        local locked = gui and gui:FindFirstChild("Locked")

        if main and remTime and locked and remTime:IsA("TextLabel") and locked:IsA("GuiObject") then
            if locked.Visible then
                local y = main.Position.Y
                if not lowestY or y < lowestY then
                    lowest = {remTime = remTime, locked = locked, main = main}
                    lowestY = y
                end
            end
        end
    end

    return lowest
end

local function scanAndConnect()
    for _, plot in pairs(Workspace:FindFirstChild("Plots"):GetChildren()) do
        local purchases = plot:FindFirstChild("Purchases")
        if purchases then
            local selected = findLowestValidRemainingTime(purchases)

            for _, purchase in pairs(purchases:GetChildren()) do
                local main = purchase:FindFirstChild("Main")
                local gui = main and main:FindFirstChild("BillboardGui")
                local remTime = gui and gui:FindFirstChild("RemainingTime")
                local locked = gui and gui:FindFirstChild("Locked")

                if main and remTime and locked and remTime:IsA("TextLabel") and locked:IsA("GuiObject") then
                    local isTarget = selected and remTime == selected.remTime
                    updateBillboard(main, remTime.Text, isTarget)

                    local key = remTime:GetDebugId()
                    if isTarget and not activeConnections[key] then
                        local function refresh()
                            local stillTarget = (findLowestValidRemainingTime(purchases) or {}).remTime == remTime
                            updateBillboard(main, remTime.Text, stillTarget and locked.Visible)
                        end

                        local conn1 = remTime:GetPropertyChangedSignal("Text"):Connect(refresh)
                        local conn2 = locked:GetPropertyChangedSignal("Visible"):Connect(refresh)
                        activeConnections[key] = {conn1, conn2}
                    end
                end
            end
        end
    end
end

local function enableTimerESP(timerEspButton, showNotification)
    timerEspEnabled = true
    if timerEspButton then
        timerEspButton.Text = "Disable Timer ESP"
        timerEspButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Timer ESP", Text = "Timer ESP: ON", Duration = 2})
    end

    task.spawn(function()
        while timerEspEnabled do
            pcall(scanAndConnect)
            task.wait(5)
        end
    end)
    
    settings.timerEspEnabled = true
    saveSettings(settings)
end

local function disableTimerESP(timerEspButton, showNotification)
    timerEspEnabled = false
    if timerEspButton then
        timerEspButton.Text = "Enable Timer ESP"
        timerEspButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Timer ESP", Text = "Timer ESP: OFF", Duration = 2})
    end

    for _, plot in pairs(Workspace:FindFirstChild("Plots"):GetChildren()) do
        local purchases = plot:FindFirstChild("Purchases")
        if purchases then
            for _, purchase in pairs(purchases:GetChildren()) do
                local main = purchase:FindFirstChild("Main")
                if main then
                    local gui = main:FindFirstChild("RemainingTimeGui")
                    if gui then gui:Destroy() end
                end
            end
        end
    end

    for _, connections in pairs(activeConnections) do
        for _, connection in ipairs(connections) do
            connection:Disconnect()
        end
    end
    activeConnections = {}
    
    settings.timerEspEnabled = false
    saveSettings(settings)
end

local function enableWebSlingerAutoAim(webSlingerButton, showNotification)
    if webSlingerConnection then
        webSlingerConnection:Disconnect()
        webSlingerConnection = nil
    end
    local tool = player.Backpack:FindFirstChild("Web Slinger") or (player.Character and player.Character:FindFirstChild("Web Slinger"))
    if not tool then
        local args = {"Web Slinger"}
        pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RF/CoinsShopService/RequestBuy"):InvokeServer(unpack(args))
            StarterGui:SetCore("SendNotification", {Title = "Web Slinger Auto Aim", Text = "Attempted to purchase Web Slinger", Duration = 3})
        end)
        task.wait(1)
        tool = player.Backpack:FindFirstChild("Web Slinger") or (player.Character and player.Character:FindFirstChild("Web Slinger"))
        if not tool then
            StarterGui:SetCore("SendNotification", {Title = "Web Slinger Auto Aim", Text = "Failed to acquire Web Slinger", Duration = 3})
            return
        end
    end

    webSlingerAutoAimEnabled = true
    if webSlingerButton then
        webSlingerButton.Text = "Disable Web Slinger Auto Aim"
        webSlingerButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Web Slinger Auto Aim", Text = "Web Slinger Auto Aim: ON", Duration = 2})
    end

    local character = player.Character or player.CharacterAdded:Wait()
    local handle = tool:WaitForChild("Handle")

    local function findNearestPlayer()
        local closestPlayer = nil
        local closestDistance = math.huge
        local handlePosition = handle.Position

        for _, targetPlayer in ipairs(Players:GetPlayers()) do
            if targetPlayer ~= player and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    local targetHrp = targetPlayer.Character.HumanoidRootPart
                    local distance = (handlePosition - targetHrp.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = targetPlayer
                    end
                end
            end
        end
        return closestPlayer
    end

    webSlingerConnection = tool.Activated:Connect(function()
        local targetPlr = findNearestPlayer()
        if targetPlr and targetPlr.Character then
            local targetPart = targetPlr.Character:WaitForChild("HumanoidRootPart")
            if targetPart then
                local targetPos = targetPart.Position
                local args = {
                    vector.create(targetPos.X, targetPos.Y, targetPos.Z),
                    targetPart,
                    handle
                }
                ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RE/UseItem"):FireServer(unpack(args))
                StarterGui:SetCore("SendNotification", {Title = "Web Slinger Auto Aim", Text = "Fired at " .. targetPlr.Name, Duration = 2})
            else
                warn("Target has no HumanoidRootPart")
                StarterGui:SetCore("SendNotification", {Title = "Web Slinger Auto Aim", Text = "Target has no HumanoidRootPart", Duration = 3})
            end
        else
            warn("No valid players found nearby.")
            StarterGui:SetCore("SendNotification", {Title = "Web Slinger Auto Aim", Text = "No valid players found nearby", Duration = 3})
        end
    end)

    settings.webSlingerAutoAimEnabled = true
    saveSettings(settings)
end

local function disableWebSlingerAutoAim(webSlingerButton, showNotification)
    if webSlingerConnection then
        webSlingerConnection:Disconnect()
        webSlingerConnection = nil
    end
    webSlingerAutoAimEnabled = false
    if webSlingerButton then
        webSlingerButton.Text = "Enable Web Slinger Auto Aim"
        webSlingerButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Web Slinger Auto Aim", Text = "Web Slinger Auto Aim: OFF", Duration = 2})
    end
    
    settings.webSlingerAutoAimEnabled = false
    saveSettings(settings)
end

local function enableInfiniteJump(infiniteJumpButton, showNotification)
    if infiniteJumpConnection then
        infiniteJumpConnection:Disconnect()
        infiniteJumpConnection = nil
    end
    infiniteJumpEnabled = true
    if infiniteJumpButton then
        infiniteJumpButton.Text = "Disable Infinite Jump"
        infiniteJumpButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Infinite Jump", Text = "Infinite Jump: ON", Duration = 2})
    end

    infiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
        local char = player.Character
        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
            local hrp = char.HumanoidRootPart
            local humanoid = char.Humanoid
            if humanoid:GetState() ~= Enum.HumanoidStateType.Dead then
                hrp.Velocity = Vector3.new(hrp.Velocity.X, 50, hrp.Velocity.Z)
            end
        end
    end)
    
    settings.infiniteJumpEnabled = true
    saveSettings(settings)
end

local function disableInfiniteJump(infiniteJumpButton, showNotification)
    if infiniteJumpConnection then
        infiniteJumpConnection:Disconnect()
        infiniteJumpConnection = nil
    end
    infiniteJumpEnabled = false
    if infiniteJumpButton then
        infiniteJumpButton.Text = "Enable Infinite Jump"
        infiniteJumpButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Infinite Jump", Text = "Infinite Jump: OFF", Duration = 2})
    end
    
    settings.infiniteJumpEnabled = false
    saveSettings(settings)
end

local function enableBoostJump(boostJumpButton, showNotification)
    for _, connection in pairs(boostJumpConnections) do
        connection:Disconnect()
    end
    boostJumpConnections = {}
    boostJumpEnabled = true
    if boostJumpButton then
        boostJumpButton.Text = "Disable Boost Jump"
        boostJumpButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Boost Jump", Text = "Boost Jump: ON", Duration = 2})
    end

    local FORWARD_STRENGTH = 50
    local MIN_MOVE_SPEED = 1
    local canBoost = true

    boostJumpConnections["Stepped"] = RunService.Stepped:Connect(function()
        local char = player.Character
        if char and char:FindFirstChild("Humanoid") then
            local state = char.Humanoid:GetState()
            canBoost = (
                state == Enum.HumanoidStateType.Running or
                state == Enum.HumanoidStateType.RunningNoPhysics or
                state == Enum.HumanoidStateType.Seated or
                state == Enum.HumanoidStateType.Landed or
                state == Enum.HumanoidStateType.PlatformStanding
            )
        end
    end)

    boostJumpConnections["Jump"] = UserInputService.JumpRequest:Connect(function()
        if not canBoost then return end

        local char = player.Character
        if not (char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid")) then return end
        local hrp = char.HumanoidRootPart

        local moving = hrp.Velocity.Magnitude > MIN_MOVE_SPEED
        local boostVector = Vector3.new(0, currentBoostStrength, 0)

        if moving then
            boostVector = boostVector + hrp.CFrame.LookVector * FORWARD_STRENGTH
        end

        hrp.Velocity = boostVector
        canBoost = false
    end)
    
    settings.boostJumpEnabled = true
    saveSettings(settings)
end

local function disableBoostJump(boostJumpButton, showNotification)
    for _, connection in pairs(boostJumpConnections) do
        connection:Disconnect()
    end
    boostJumpConnections = {}
    boostJumpEnabled = false
    if boostJumpButton then
        boostJumpButton.Text = "Enable Boost Jump"
        boostJumpButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Boost Jump", Text = "Boost Jump: OFF", Duration = 2})
    end
    
    settings.boostJumpEnabled = false
    saveSettings(settings)
end

local function updateBoostStrength(newStrength)
    currentBoostStrength = newStrength
    settings.currentBoostStrength = newStrength
    saveSettings(settings)
end

local function enableAntiHit(antiHitButton, showNotification)
    if antiHitConnection then
        antiHitConnection:Disconnect()
        antiHitConnection = nil
    end
    antiHitEnabled = true
    if antiHitButton then
        antiHitButton.Text = "Disable Anti Hit"
        antiHitButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Anti Hit", Text = "Anti Hit: ON", Duration = 2})
    end

    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRoot = character:WaitForChild("HumanoidRootPart")
    local webName = "Web Slinger"
    local remote = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RE/UseItem")
    local buyRemote = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Net"):WaitForChild("RF/CoinsShopService/RequestBuy")

    local function getWebTool()
        for _, tool in ipairs(player.Backpack:GetChildren()) do
            if tool:IsA("Tool") and tool.Name == webName then
                return tool
            end
        end
        return nil
    end

    local function ensureWebTool()
        if not getWebTool() then
            buyRemote:InvokeServer(webName)
        end
    end

    local function equipWebSlinger()
        local currentTool = character:FindFirstChildOfClass("Tool")
        if currentTool and currentTool.Name ~= webName then
            currentTool.Parent = player.Backpack
        end
        local tool = getWebTool()
        if tool then
            tool.Parent = character
        end
    end

    local function useWebSlinger()
        local tool = character:FindFirstChild(webName)
        if tool and tool:FindFirstChild("Handle") then
            local args = {
                vector.create(-391.2049865722656, -7.293223857879639, 124.80510711669922),
                character:WaitForChild("UpperTorso")
            }
            remote:FireServer(unpack(args))
        end
    end

    local existingGui = player.PlayerGui:FindFirstChild("WebSlingerGUI")
    if existingGui then
        existingGui:Destroy()
    end

    local gui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
    gui.Name = "WebSlingerGUI"
    gui.ResetOnSpawn = false

    local buttonHolder = Instance.new("Frame")
    buttonHolder.Size = UDim2.new(0, 180, 0, 60)
    buttonHolder.Position = UDim2.new(1, -20, 0, 10)
    buttonHolder.AnchorPoint = Vector2.new(1, 0)
    buttonHolder.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    buttonHolder.BackgroundTransparency = 0.2
    buttonHolder.BorderSizePixel = 0
    buttonHolder.Active = true
    buttonHolder.Draggable = true
    buttonHolder.ZIndex = 3
    buttonHolder.Parent = gui
    Instance.new("UICorner", buttonHolder).CornerRadius = UDim.new(0, 16)

    local mainButton = Instance.new("TextButton")
    mainButton.Size = UDim2.new(1, -40, 1, -20)
    mainButton.Position = UDim2.new(0, 20, 0, 10)
    mainButton.Text = "🎯 Anti Hit v1"
    mainButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    mainButton.TextColor3 = Color3.new(1, 1, 1)
    mainButton.Font = Enum.Font.SourceSansBold
    mainButton.TextSize = 22
    mainButton.BorderSizePixel = 0
    mainButton.ZIndex = 4
    mainButton.Parent = buttonHolder
    Instance.new("UICorner", mainButton).CornerRadius = UDim.new(0, 12)

    local autoButton = Instance.new("TextButton")
    autoButton.Size = UDim2.new(0, 60, 0, 25)
    autoButton.Position = UDim2.new(1, -65, 1, 5)
    autoButton.AnchorPoint = Vector2.new(0, 0)
    autoButton.Text = "Auto: OFF"
    autoButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    autoButton.TextColor3 = Color3.new(1, 1, 1)
    autoButton.Font = Enum.Font.SourceSansBold
    autoButton.TextSize = 14
    autoButton.BorderSizePixel = 0
    autoButton.ZIndex = 5
    autoButton.Parent = buttonHolder
    Instance.new("UICorner", autoButton).CornerRadius = UDim.new(0, 8)

    local autoMode = false
    autoButton.MouseButton1Click:Connect(function()
        autoMode = not autoMode
        autoButton.Text = "Auto: " .. (autoMode and "ON" or "OFF")
        autoButton.BackgroundColor3 = autoMode and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(100, 100, 100)
    end)

    mainButton.MouseButton1Click:Connect(function()
        ensureWebTool()
        task.wait(0.3)
        equipWebSlinger()
        task.wait(0.1)
        useWebSlinger()
    end)

    local lastTriggered = 0
    local cooldown = 3.5

    antiHitConnection = RunService.Heartbeat:Connect(function()
        if autoMode then
            local trappedFrame = humanoidRoot:FindFirstChild("TrappedTag")
            local main = trappedFrame and trappedFrame:FindFirstChild("MainFrame")
            local timeObj = main and main:FindFirstChild("Time")

            if not timeObj and (tick() - lastTriggered) >= cooldown then
                lastTriggered = tick()
                ensureWebTool()
                task.wait(0.3)
                equipWebSlinger()
                task.wait(3.5)
                useWebSlinger()
            end
        end
    end)

    task.defer(function()
        RunService.RenderStepped:Connect(function()
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.PlatformStand then
                humanoid.PlatformStand = false
            end
        end)
    end)

    settings.antiHitEnabled = true
    saveSettings(settings)
end

local function disableAntiHit(antiHitButton, showNotification)
    if antiHitConnection then
        antiHitConnection:Disconnect()
        antiHitConnection = nil
    end
    antiHitEnabled = false
    if antiHitButton then
        antiHitButton.Text = "Enable Anti Hit"
        antiHitButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Anti Hit", Text = "Anti Hit: OFF", Duration = 2})
    end

    local existingGui = player.PlayerGui:FindFirstChild("WebSlingerGUI")
    if existingGui then
        existingGui:Destroy()
    end
    
    settings.antiHitEnabled = false
    saveSettings(settings)
end

local function resizeAndModifyTool(tool)
    local handle = tool:FindFirstChild("Handle")
    if handle then
        if not originalToolProperties then
            originalToolProperties = {
                Size = handle.Size,
                Transparency = handle.Transparency,
                Massless = handle.Massless,
                CastShadow = handle.CastShadow,
                GripPos = tool.GripPos
            }
        end
        if not handle:FindFirstChild("SelectionBoxCreated") then
            local selectionBox = Instance.new("SelectionBox")
            selectionBox.Name = "SelectionBoxCreated"
            selectionBox.Adornee = handle
            selectionBox.Parent = handle
        end
        handle.Massless = true
        handle.Size = Vector3.new(60, 60, 60)
        handle.Transparency = 1
        handle.CastShadow = false
        tool.GripPos = Vector3.new(0, 0, 0)
    end
end

local function enableSnipeTurrets(snipeTurretsButton, showNotification)
    snipeTurretsEnabled = true
    settings.snipeTurretsEnabled = true
    saveSettings(settings)
    if snipeTurretsButton then
        snipeTurretsButton.Text = "Disable Snipe Turrets"
        snipeTurretsButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Snipe Turrets", Text = "Snipe Turrets: ON", Duration = 2})
    end

    local desiredToolName = "Tung Bat"
    local character = player.Character or player.CharacterAdded:Wait()
    local currentTool = character:FindFirstChildOfClass("Tool")
    if currentTool and currentTool.Name == desiredToolName then
        resizeAndModifyTool(currentTool)
    end

    if snipeTurretsConnection then
        snipeTurretsConnection:Disconnect()
    end
    snipeTurretsConnection = character.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child.Name == desiredToolName then
            resizeAndModifyTool(child)
        end
    end)
end

local function disableSnipeTurrets(snipeTurretsButton, showNotification)
    snipeTurretsEnabled = false
    settings.snipeTurretsEnabled = false
    saveSettings(settings)
    if snipeTurretsButton then
        snipeTurretsButton.Text = "Enable Snipe Turrets"
        snipeTurretsButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Snipe Turrets", Text = "Snipe Turrets: OFF", Duration = 2})
    end

    local desiredToolName = "Tung Bat"
    local backpack = player:WaitForChild("Backpack")
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == desiredToolName then
            local handle = tool:FindFirstChild("Handle")
            if handle and originalToolProperties then
                handle.Size = originalToolProperties.Size
                handle.Transparency = originalToolProperties.Transparency
                handle.Massless = originalToolProperties.Massless
                handle.CastShadow = originalToolProperties.CastShadow
                tool.GripPos = originalToolProperties.GripPos
                local selectionBox = handle:FindFirstChild("SelectionBoxCreated")
                if selectionBox then
                    selectionBox:Destroy()
                end
            end
        end
    end
    local character = player.Character
    if character then
        local currentTool = character:FindFirstChildOfClass("Tool")
        if currentTool and currentTool.Name == desiredToolName then
            local handle = currentTool:FindFirstChild("Handle")
            if handle and originalToolProperties then
                handle.Size = originalToolProperties.Size
                handle.Transparency = originalToolProperties.Transparency
                handle.Massless = originalToolProperties.Massless
                handle.CastShadow = originalToolProperties.CastShadow
                currentTool.GripPos = originalToolProperties.GripPos
                local selectionBox = handle:FindFirstChild("SelectionBoxCreated")
                if selectionBox then
                    selectionBox:Destroy()
                end
            end
        end
    end
    originalToolProperties = nil
    if snipeTurretsConnection then
        snipeTurretsConnection:Disconnect()
        snipeTurretsConnection = nil
    end
end

local function extractNumber(str)
    if not str then return 0 end
    local numberStr = str:match("%$(.-)/s")
    if not numberStr then return 0 end
    numberStr = numberStr:gsub("%s", "")
    local multiplier = 1
    if numberStr:lower():find("k") then
        multiplier = 1_000
        numberStr = numberStr:gsub("[kK]", "")
    elseif numberStr:lower():find("m") then
        multiplier = 1_000_000
        numberStr = numberStr:gsub("[mM]", "")
    elseif numberStr:lower():find("b") then
        multiplier = 1_000_000_000
        numberStr = numberStr:gsub("[bB]", "")
    end
    return (tonumber(numberStr) or 0) * multiplier
end

local mutationColors = {
    Gold = Color3.fromRGB(255, 215, 0),
    Diamond = Color3.fromRGB(0, 255, 255),
    Lava = Color3.fromRGB(255, 100, 0),
    Bloodrot = Color3.fromRGB(255, 0, 0),
}

local function getMutationTextAndColor(mutation)
    if not mutation then
        return "Default", Color3.fromRGB(255, 255, 255), false
    end
    if mutation.Visible == false then
        return "Default", Color3.fromRGB(255, 255, 255), false
    end
    
    local name = mutation.Text
    if name == "" then
        return "Default", Color3.fromRGB(255, 255, 255), false
    end

    if name == "Rainbow" then
        return "Rainbow", Color3.new(1,1,1), true
    end

    local color = mutationColors[name] or Color3.fromRGB(255, 255, 255)
    return name, color, false
end

local function createGui(base, overhead, labels)
    if base:FindFirstChild("StatGui") then
        base.StatGui:Destroy()
    end

    local gui = Instance.new("BillboardGui")
    gui.Name = "StatGui"
    gui.Size = UDim2.new(0, 200, 0, 60)
    gui.StudsOffset = Vector3.new(0, 3, 0)
    gui.AlwaysOnTop = true
    gui.Adornee = base
    gui.Parent = base

    local labelList = {}

    local function createLabel(order, text)
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0.25, 0)
        label.Position = UDim2.new(0, 0, 0.25 * (order - 1), 0)
        label.BackgroundTransparency = 1
        label.TextScaled = true
        label.Font = Enum.Font.GothamBold
        label.TextStrokeTransparency = 0.5
        label.Text = text or "N/A"
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Name = "StatLine"
        label.Parent = gui
        table.insert(labelList, label)
    end

    createLabel(1, labels.DisplayName)
    createLabel(2, labels.Generation)
    createLabel(3, labels.Mutation)
    createLabel(4, labels.Rarity)

    local mutationText = labels.Mutation
    local color = Color3.fromRGB(255, 255, 255)
    local isRainbow = false

    if mutationText == "Rainbow" then
        isRainbow = true
    elseif mutationColors[mutationText] then
        color = mutationColors[mutationText]
    end

    if not isRainbow then
        for _, lbl in ipairs(labelList) do
            lbl.TextColor3 = color
        end
    else
        local t = 0
        RunService.RenderStepped:Connect(function(dt)
            if gui.Parent == nil then return end
            t += dt * 0.2
            local rainbowColor = Color3.fromHSV(t % 1, 1, 1)
            for _, lbl in ipairs(labelList) do
                lbl.TextColor3 = rainbowColor
            end
        end)
    end
end

local function getAllPodiums()
    local podiums = {}
    for _, plot in pairs(workspace:WaitForChild("Plots"):GetChildren()) do
        local animalPods = plot:FindFirstChild("AnimalPodiums")
        if animalPods then
            for _, pod in pairs(animalPods:GetChildren()) do
                local base = pod:FindFirstChild("Base")
                if base and base:FindFirstChild("Spawn") then
                    local attach = base.Spawn:FindFirstChild("Attachment")
                    if attach and attach:FindFirstChild("AnimalOverhead") then
                        table.insert(podiums, attach.AnimalOverhead)
                    end
                end
            end
        end
    end
    return podiums
end

local currentBase = nil
local currentGui = nil

local function enableBrainrotEsp(brainrotButton, showNotification)
    brainrotEspEnabled = true
    if brainrotButton then
        brainrotButton.Text = "Disable Highest Value ESP"
        brainrotButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Highest Value ESP", Text = "Highest Value ESP: ON", Duration = 2})
    end

    task.spawn(function()
        while brainrotEspEnabled do
            local bestPodium = nil
            local bestValue = -math.huge
            local bestLabels = nil
            local bestBase = nil

            for _, overhead in pairs(getAllPodiums()) do
                local base = overhead.Parent.Parent.Parent
                if base and (base:IsA("BasePart") or base:IsA("Model")) then
                    local genLabel = overhead:FindFirstChild("Generation")
                    if genLabel then
                        local genValue = extractNumber(genLabel.Text)
                        local mutation = overhead:FindFirstChild("Mutation")
                        local mutText, _, _ = getMutationTextAndColor(mutation)
                        if genValue > bestValue then
                            bestValue = genValue
                            bestPodium = overhead
                            bestBase = base
                            bestLabels = {
                                DisplayName = overhead:FindFirstChild("DisplayName") and overhead.DisplayName.Text or "Unknown",
                                Generation = genLabel.Text,
                                Mutation = mutText,
                                Rarity = overhead:FindFirstChild("Rarity") and overhead.Rarity.Text or "None"
                            }
                        end
                    end
                end
            end

            if bestPodium and bestBase then
                if currentBase ~= bestBase then
                    if currentGui and currentGui.Parent then
                        currentGui:Destroy()
                    end
                    currentBase = bestBase
                    createGui(bestBase, bestPodium, bestLabels)
                    currentGui = bestBase:FindFirstChild("StatGui")
                end
            else
                if currentGui and currentGui.Parent then
                    currentGui:Destroy()
                end
                currentBase = nil
                currentGui = nil
            end

            task.wait(1)
        end
    end)
    
    settings.brainrotEspEnabled = true
    saveSettings(settings)
end

local function disableBrainrotEsp(brainrotButton, showNotification)
    brainrotEspEnabled = false
    if brainrotButton then
        brainrotButton.Text = "Enable Highest Value ESP"
        brainrotButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Highest Value ESP", Text = "Highest Value ESP: OFF", Duration = 2})
    end

    if currentGui and currentGui.Parent then
        currentGui:Destroy()
    end
    currentBase = nil
    currentGui = nil
    
    settings.brainrotEspEnabled = false
    saveSettings(settings)
end

local function FindPlayerBase()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then
        warn("Plots folder not found in workspace")
        return nil
    end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                return plot
            end
        end
    end
    warn("No player base found")
    return nil
end

local function CountAttachments()
    local plot = FindPlayerBase()
    if not plot then return 0 end

    local animalPodiums = plot:FindFirstChild("AnimalPodiums")
    if not animalPodiums then return 0 end

    local count = 0
    for _, podium in pairs(animalPodiums:GetChildren()) do
        local base = podium:FindFirstChild("Base")
        if base then
            local spawn = base:FindFirstChild("Spawn")
            if spawn then
                local attachment = spawn:FindFirstChild("Attachment")
                if attachment then
                    count = count + 1
                end
            end
        end
    end
    return count
end

local function enableAutoKick(autoKickButton, showNotification)
    if autoKickConnection then
        autoKickConnection:Disconnect()
        autoKickConnection = nil
    end
    autoKickEnabled = true
    if autoKickButton then
        autoKickButton.Text = "Disable Auto Kick after Steal"
        autoKickButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Auto Kick after Steal", Text = "Auto Kick after Steal: ON", Duration = 2})
    end

    local previousCount = CountAttachments()

    autoKickConnection = RunService.Heartbeat:Connect(function()
        local currentCount = CountAttachments()
        if currentCount == previousCount + 1 then
            StarterGui:SetCore("SendNotification", {Title = "Stolen!", Text = "An item was stolen from your base!", Duration = 3})
            player:Kick("Stolen!")
        end
        previousCount = currentCount
    end)
    
    settings.autoKickEnabled = true
    saveSettings(settings)
end

local function disableAutoKick(autoKickButton, showNotification)
    if autoKickConnection then
        autoKickConnection:Disconnect()
        autoKickConnection = nil
    end
    autoKickEnabled = false
    if autoKickButton then
        autoKickButton.Text = "Enable Auto Kick after Steal"
        autoKickButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    end
    if showNotification == nil then showNotification = true end
    if showNotification then
        StarterGui:SetCore("SendNotification", {Title = "Auto Kick after Steal", Text = "Auto Kick after Steal: OFF", Duration = 2})
    end
    
    settings.autoKickEnabled = false
    saveSettings(settings)
end

local function createTabContent(name)
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1.2, -10, 1, -80)
    contentFrame.Position = UDim2.new(0.3, 50, 0, 80)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Visible = false
    contentFrame.Parent = mainFrame

    if name == "Main" then
        local infiniteJumpButton = Instance.new("TextButton")
        infiniteJumpButton.Size = UDim2.new(0, 250, 0, 40)
        infiniteJumpButton.Position = UDim2.new(0, -35, 0, 10)
        infiniteJumpButton.BackgroundColor3 = infiniteJumpEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        infiniteJumpButton.Text = infiniteJumpEnabled and "Disable Infinite Jump" or "Enable Infinite Jump"
        infiniteJumpButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        infiniteJumpButton.TextSize = 18
        infiniteJumpButton.Font = Enum.Font.GothamBold
        infiniteJumpButton.Parent = contentFrame
        local infiniteJumpCorner = Instance.new("UICorner", infiniteJumpButton)
        infiniteJumpCorner.CornerRadius = UDim.new(0, 8)

        infiniteJumpButton.MouseButton1Down:Connect(function()
            TweenService:Create(infiniteJumpButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        infiniteJumpButton.MouseButton1Up:Connect(function()
            if not infiniteJumpEnabled then
                TweenService:Create(infiniteJumpButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        infiniteJumpButton.MouseLeave:Connect(function()
            if not infiniteJumpEnabled then
                TweenService:Create(infiniteJumpButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        infiniteJumpButton.MouseButton1Click:Connect(function()
            if not infiniteJumpEnabled then
                enableInfiniteJump(infiniteJumpButton, true)
                if walkspeedEnabled then
                    enableWalkspeed(nil, nil, true)
                end
            else
                disableInfiniteJump(infiniteJumpButton, true)
            end
        end)

        local actionButton = Instance.new("TextButton")
        actionButton.Size = UDim2.new(0, 200, 0, 40)
        actionButton.Position = UDim2.new(0, -35, 0, 60)
        actionButton.BackgroundColor3 = walkspeedEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        actionButton.Text = walkspeedEnabled and "Disable Walkspeed" or "Enable Walkspeed"
        actionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        actionButton.TextSize = 18
        actionButton.Font = Enum.Font.GothamBold
        actionButton.Parent = contentFrame
        local buttonCorner = Instance.new("UICorner", actionButton)
        buttonCorner.CornerRadius = UDim.new(0, 8)

        local speedTextBox = Instance.new("TextBox")
        speedTextBox.Size = UDim2.new(0, 40, 0, 40)
        speedTextBox.Position = UDim2.new(0, 170, 0, 0)
        speedTextBox.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        speedTextBox.Text = tostring(currentWalkSpeed)
        speedTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
        speedTextBox.TextSize = 18
        speedTextBox.Font = Enum.Font.GothamBold
        speedTextBox.TextXAlignment = Enum.TextXAlignment.Center
        speedTextBox.Parent = actionButton
        local textBoxCorner = Instance.new("UICorner", speedTextBox)
        textBoxCorner.CornerRadius = UDim.new(0, 8)

        speedTextBox.FocusLost:Connect(function()
            local input = tonumber(speedTextBox.Text)
            if input and input >= 50 and input <= 100 then
                updateWalkspeed(input)
                speedTextBox.Text = tostring(currentWalkSpeed)
                StarterGui:SetCore("SendNotification", {Title = "Walkspeed Updated", Text = "Walkspeed set to " .. currentWalkSpeed, Duration = 3})
            else
                speedTextBox.Text = tostring(currentWalkSpeed)
                StarterGui:SetCore("SendNotification", {Title = "Invalid Speed", Text = "Speed must be between 50 and 100", Duration = 3})
            end
        end)

        actionButton.MouseButton1Down:Connect(function()
            TweenService:Create(actionButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        actionButton.MouseButton1Up:Connect(function()
            if not walkspeedEnabled then
                TweenService:Create(actionButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        actionButton.MouseLeave:Connect(function()
            if not walkspeedEnabled then
                TweenService:Create(actionButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        actionButton.MouseButton1Click:Connect(function()
            if not walkspeedEnabled then
                enableWalkspeed(actionButton, speedTextBox, true)
            else
                disableWalkspeed(actionButton)
            end
        end)

        local tweenStealButton = Instance.new("TextButton")
        tweenStealButton.Size = UDim2.new(0, 250, 0, 40)
        tweenStealButton.Position = UDim2.new(0, -35, 0, 110)
        tweenStealButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        tweenStealButton.Text = "Tween Steal"
        tweenStealButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tweenStealButton.TextSize = 18
        tweenStealButton.Font = Enum.Font.GothamBold
        tweenStealButton.Parent = contentFrame
        local tweenButtonCorner = Instance.new("UICorner", tweenStealButton)
        tweenButtonCorner.CornerRadius = UDim.new(0, 8)

        tweenStealButton.MouseButton1Down:Connect(function()
            TweenService:Create(tweenStealButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        tweenStealButton.MouseButton1Up:Connect(function()
            TweenService:Create(tweenStealButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
        end)
        tweenStealButton.MouseLeave:Connect(function()
            TweenService:Create(tweenStealButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
        end)

        tweenStealButton.MouseButton1Click:Connect(function()
            local wasWalkspeedEnabled = walkspeedEnabled
            if wasWalkspeedEnabled then
                disableWalkspeed()
            end

            local existingTeleportGui = PlayerGui:FindFirstChild("TeleportGUI")
            if existingTeleportGui then
                existingTeleportGui:Destroy()
            end

            local gui = Instance.new("ScreenGui", PlayerGui)
            gui.Name = "TeleportGUI"
            gui.ResetOnSpawn = false

            local buttonHolder = Instance.new("Frame")
            buttonHolder.Size = UDim2.new(0, 180, 0, 60)
            buttonHolder.Position = UDim2.new(1, -20, 0, 10)
            buttonHolder.AnchorPoint = Vector2.new(1, 0)
            buttonHolder.BackgroundColor3 = Color3.new(0, 0, 0)
            buttonHolder.BackgroundTransparency = 0.2
            buttonHolder.BorderSizePixel = 0
            buttonHolder.Active = true
            buttonHolder.Draggable = true
            buttonHolder.ZIndex = 3
            buttonHolder.Parent = gui
            Instance.new("UICorner", buttonHolder).CornerRadius = UDim.new(0, 16)

            local tweenButton = Instance.new("TextButton")
            tweenButton.Size = UDim2.new(1, -40, 0, 35)
            tweenButton.Position = UDim2.new(0, 20, 0, 10)
            tweenButton.Text = "↓ Tween"
            tweenButton.BackgroundColor3 = Color3.fromRGB(0, 100, 200)
            tweenButton.TextColor3 = Color3.new(1, 1, 1)
            tweenButton.Font = Enum.Font.SourceSansBold
            tweenButton.TextSize = 22
            tweenButton.BorderSizePixel = 0
            tweenButton.ZIndex = 4
            tweenButton.Parent = buttonHolder
            Instance.new("UICorner", tweenButton).CornerRadius = UDim.new(0, 12)

            local function FindDelivery()
                local plots = workspace:FindFirstChild("Plots")
                if not plots then
                    warn("Plots folder not found in workspace")
                    return
                end
                for _, plot in pairs(plots:GetChildren()) do
                    local sign = plot:FindFirstChild("PlotSign")
                    if sign then
                        local yourBase = sign:FindFirstChild("YourBase")
                        if yourBase and yourBase.Enabled then
                            local hitbox = plot:FindFirstChild("DeliveryHitbox")
                            if hitbox then return hitbox end
                        end
                    end
                end
                warn("No valid DeliveryHitbox found")
            end

            tweenButton.MouseButton1Click:Connect(function()
                local character = player.Character or player.CharacterAdded:Wait()
                local root = character:FindFirstChild("HumanoidRootPart")
                local humanoid = character:FindFirstChildWhichIsA("Humanoid")
                if not (root and humanoid) then return end

                local target = FindDelivery()
                if not target then return end

                local finalPos = Vector3.new(target.Position.X, root.Position.Y, target.Position.Z)
                print("Pushing to DeliveryHitbox...")

                local bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                bodyVelocity.Parent = root

                local speed = 100
                local stopDistance = 55
                local maxTime = 10
                local gravity = workspace.Gravity or 196.2
                local antiGravityVelocity = math.sqrt(2 * gravity * 0.1)

                local startTime = tick()
                local reached = false

                while tick() - startTime < maxTime do
                    local currentPos = root.Position
                    local horizontalDistance = Vector3.new(finalPos.X, 0, finalPos.Z) - Vector3.new(currentPos.X, 0, currentPos.Z)
                    local distance = horizontalDistance.Magnitude

                    if distance <= stopDistance then
                        reached = true
                        break
                    end

                    local direction = horizontalDistance.Unit
                    bodyVelocity.Velocity = Vector3.new(direction.X * speed, antiGravityVelocity, direction.Z * speed)
                    task.wait()
                end

                bodyVelocity:Destroy()

                if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                    humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
                end

                if reached then
                    print("reached DeliveryHitbox, falling.")
                    StarterGui:SetCore("SendNotification", {Title = "Warning!", Text = "You need to leave after steal because anti-cheat will kick you!", Duration = 8})
                    if wasWalkspeedEnabled then
                        enableWalkspeed(actionButton, speedTextBox)
                    end
                else
                    warn("Failed to reach DeliveryHitbox within time.")
                    if wasWalkspeedEnabled then
                        enableWalkspeed(actionButton, speedTextBox)
                    end
                end
            end)
        end)

        local snipeTurretsButton = Instance.new("TextButton")
        snipeTurretsButton.Size = UDim2.new(0, 250, 0, 40)
        snipeTurretsButton.Position = UDim2.new(0, -35, 0, 160)
        snipeTurretsButton.BackgroundColor3 = snipeTurretsEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        snipeTurretsButton.Text = snipeTurretsEnabled and "Disable Snipe Turrets" or "Enable Snipe Turrets"
        snipeTurretsButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        snipeTurretsButton.TextSize = 18
        snipeTurretsButton.Font = Enum.Font.GothamBold
        snipeTurretsButton.Parent = contentFrame
        local snipeTurretsButtonCorner = Instance.new("UICorner", snipeTurretsButton)
        snipeTurretsButtonCorner.CornerRadius = UDim.new(0, 8)

        snipeTurretsButton.MouseButton1Down:Connect(function()
            TweenService:Create(snipeTurretsButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        snipeTurretsButton.MouseButton1Up:Connect(function()
            if not snipeTurretsEnabled then
                TweenService:Create(snipeTurretsButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        snipeTurretsButton.MouseLeave:Connect(function()
            if not snipeTurretsEnabled then
                TweenService:Create(snipeTurretsButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        snipeTurretsButton.MouseButton1Click:Connect(function()
            if not snipeTurretsEnabled then
                enableSnipeTurrets(snipeTurretsButton, true)
            else
                disableSnipeTurrets(snipeTurretsButton, true)
            end
        end)

        local boostJumpButton = Instance.new("TextButton")
        boostJumpButton.Size = UDim2.new(0, 200, 0, 40)
        boostJumpButton.Position = UDim2.new(0, -35, 0, -40)
        boostJumpButton.BackgroundColor3 = boostJumpEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        boostJumpButton.Text = boostJumpEnabled and "Disable Boost Jump" or "Enable Boost Jump"
        boostJumpButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        boostJumpButton.TextSize = 18
        boostJumpButton.Font = Enum.Font.GothamBold
        boostJumpButton.Parent = contentFrame
        local boostJumpCorner = Instance.new("UICorner", boostJumpButton)
        boostJumpCorner.CornerRadius = UDim.new(0, 8)

        local boostTextBox = Instance.new("TextBox")
        boostTextBox.Size = UDim2.new(0, 40, 0, 40)
        boostTextBox.Position = UDim2.new(0, 170, 0, 0)
        boostTextBox.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        boostTextBox.Text = tostring(currentBoostStrength)
        boostTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
        boostTextBox.TextSize = 18
        boostTextBox.Font = Enum.Font.GothamBold
        boostTextBox.TextXAlignment = Enum.TextXAlignment.Center
        boostTextBox.Parent = boostJumpButton
        local boostTextBoxCorner = Instance.new("UICorner", boostTextBox)
        boostTextBoxCorner.CornerRadius = UDim.new(0, 8)

        boostTextBox.FocusLost:Connect(function()
            local input = tonumber(boostTextBox.Text)
            if input and input >= 50 and input <= 300 then
                updateBoostStrength(input)
                boostTextBox.Text = tostring(currentBoostStrength)
                StarterGui:SetCore("SendNotification", {Title = "Boost Strength Updated", Text = "Boost strength set to " .. currentBoostStrength, Duration = 3})
            else
                boostTextBox.Text = tostring(currentBoostStrength)
                StarterGui:SetCore("SendNotification", {Title = "Invalid Strength", Text = "Boost strength must be between 50 and 300", Duration = 3})
            end
        end)

        boostJumpButton.MouseButton1Down:Connect(function()
            TweenService:Create(boostJumpButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        boostJumpButton.MouseButton1Up:Connect(function()
            if not boostJumpEnabled then
                TweenService:Create(boostJumpButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        boostJumpButton.MouseLeave:Connect(function()
            if not boostJumpEnabled then
                TweenService:Create(boostJumpButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        boostJumpButton.MouseButton1Click:Connect(function()
            if not boostJumpEnabled then
                enableBoostJump(boostJumpButton, true)
                if walkspeedEnabled then
                    enableWalkspeed(actionButton, speedTextBox, true)
                end
            else
                disableBoostJump(boostJumpButton, true)
            end
        end)
    elseif name == "Settings" then
        local antiHitButton = Instance.new("TextButton")
        antiHitButton.Size = UDim2.new(0, 250, 0, 40)
        antiHitButton.Position = UDim2.new(0, -35, 0, -40)
        antiHitButton.BackgroundColor3 = antiHitEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        antiHitButton.Text = antiHitEnabled and "Disable Anti Hit" or "Enable Anti Hit"
        antiHitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        antiHitButton.TextSize = 18
        antiHitButton.Font = Enum.Font.GothamBold
        antiHitButton.Parent = contentFrame
        local antiHitButtonCorner = Instance.new("UICorner", antiHitButton)
        antiHitButtonCorner.CornerRadius = UDim.new(0, 8)

        antiHitButton.MouseButton1Down:Connect(function()
            TweenService:Create(antiHitButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        antiHitButton.MouseButton1Up:Connect(function()
            if not antiHitEnabled then
                TweenService:Create(antiHitButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        antiHitButton.MouseLeave:Connect(function()
            if not antiHitEnabled then
                TweenService:Create(antiHitButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        antiHitButton.MouseButton1Click:Connect(function()
            if not antiHitEnabled then
                enableAntiHit(antiHitButton, true)
            else
                disableAntiHit(antiHitButton, true)
            end
        end)

        local antiTrapButton = Instance.new("TextButton")
        antiTrapButton.Size = UDim2.new(0, 250, 0, 40)
        antiTrapButton.Position = UDim2.new(0, -35, 0, 10)
        antiTrapButton.BackgroundColor3 = antiTrapEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        antiTrapButton.Text = antiTrapEnabled and "Disable Anti Trap" or "Enable Anti Trap"
        antiTrapButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        antiTrapButton.TextSize = 18
        antiTrapButton.Font = Enum.Font.GothamBold
        antiTrapButton.Parent = contentFrame
        local antiTrapButtonCorner = Instance.new("UICorner", antiTrapButton)
        antiTrapButtonCorner.CornerRadius = UDim.new(0, 8)

        antiTrapButton.MouseButton1Down:Connect(function()
            TweenService:Create(antiTrapButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        antiTrapButton.MouseButton1Up:Connect(function()
            if not antiTrapEnabled then
                TweenService:Create(antiTrapButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        antiTrapButton.MouseLeave:Connect(function()
            if not antiTrapEnabled then
                TweenService:Create(antiTrapButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        antiTrapButton.MouseButton1Click:Connect(function()
            if not antiTrapEnabled then
                enableAntiTrap(antiTrapButton, true)
            else
                disableAntiTrap(antiTrapButton, true)
            end
        end)

        local autoKickButton = Instance.new("TextButton")
        autoKickButton.Size = UDim2.new(0, 250, 0, 40)
        autoKickButton.Position = UDim2.new(0, -35, 0, 60)
        autoKickButton.BackgroundColor3 = autoKickEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        autoKickButton.Text = autoKickEnabled and "Disable Auto Kick after Steal" or "Enable Auto Kick after Steal"
        autoKickButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        autoKickButton.TextSize = 18
        autoKickButton.Font = Enum.Font.GothamBold
        autoKickButton.Parent = contentFrame
        local autoKickButtonCorner = Instance.new("UICorner", autoKickButton)
        autoKickButtonCorner.CornerRadius = UDim.new(0, 8)

        autoKickButton.MouseButton1Down:Connect(function()
            TweenService:Create(autoKickButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        autoKickButton.MouseButton1Up:Connect(function()
            if not autoKickEnabled then
                TweenService:Create(autoKickButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        autoKickButton.MouseLeave:Connect(function()
            if not autoKickEnabled then
                TweenService:Create(autoKickButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        autoKickButton.MouseButton1Click:Connect(function()
            if not autoKickEnabled then
                enableAutoKick(autoKickButton, true)
            else
                disableAutoKick(autoKickButton, true)
            end
        end)

        local antiRagdollButton = Instance.new("TextButton")
        antiRagdollButton.Size = UDim2.new(0, 250, 0, 40)
        antiRagdollButton.Position = UDim2.new(0, -35, 0, 110)
        antiRagdollButton.BackgroundColor3 = antiRagdollEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        antiRagdollButton.Text = antiRagdollEnabled and "Disable Anti Ragdoll" or "Enable Anti Ragdoll"
        antiRagdollButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        antiRagdollButton.TextSize = 18
        antiRagdollButton.Font = Enum.Font.GothamBold
        antiRagdollButton.Parent = contentFrame
        local antiRagdollButtonCorner = Instance.new("UICorner", antiRagdollButton)
        antiRagdollButtonCorner.CornerRadius = UDim.new(0, 8)

        antiRagdollButton.MouseButton1Down:Connect(function()
            TweenService:Create(antiRagdollButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        antiRagdollButton.MouseButton1Up:Connect(function()
            if not antiRagdollEnabled then
                TweenService:Create(antiRagdollButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        antiRagdollButton.MouseLeave:Connect(function()
            if not antiRagdollEnabled then
                TweenService:Create(antiRagdollButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        antiRagdollButton.MouseButton1Click:Connect(function()
            antiRagdollEnabled = not antiRagdollEnabled
            if antiRagdollEnabled then
                antiRagdollButton.Text = "Disable Anti Ragdoll"
                antiRagdollButton.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
                StarterGui:SetCore("SendNotification", {Title = "Anti Ragdoll", Text = "Anti Ragdoll: ON", Duration = 2})
                antiRagdollConnection = player.CharacterAdded:Connect(setupAntiFlyRagdoll)
                if player.Character then
                    setupAntiFlyRagdoll(player.Character)
                end
            else
                antiRagdollButton.Text = "Enable Anti Ragdoll"
                antiRagdollButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                StarterGui:SetCore("SendNotification", {Title = "Anti Ragdoll", Text = "Anti Ragdoll: OFF", Duration = 2})
                if antiRagdollConnection then
                    antiRagdollConnection:Disconnect()
                    antiRagdollConnection = nil
                end
            end
            settings.antiRagdollEnabled = antiRagdollEnabled
            saveSettings(settings)
        end)
    elseif name == "ESP" then
        local brainrotButton = Instance.new("TextButton")
        brainrotButton.Size = UDim2.new(0, 250, 0, 40)
        brainrotButton.Position = UDim2.new(0, -35, 0, 10)
        brainrotButton.BackgroundColor3 = brainrotEspEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        brainrotButton.Text = brainrotEspEnabled and "Disable Highest Value ESP" or "Enable Highest Value ESP"
        brainrotButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        brainrotButton.TextSize = 18
        brainrotButton.Font = Enum.Font.GothamBold
        brainrotButton.Parent = contentFrame
        local brainrotButtonCorner = Instance.new("UICorner", brainrotButton)
        brainrotButtonCorner.CornerRadius = UDim.new(0, 8)

        brainrotButton.MouseButton1Down:Connect(function()
            TweenService:Create(brainrotButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        brainrotButton.MouseButton1Up:Connect(function()
            if not brainrotEspEnabled then
                TweenService:Create(brainrotButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        brainrotButton.MouseLeave:Connect(function()
            if not brainrotEspEnabled then
                TweenService:Create(brainrotButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        brainrotButton.MouseButton1Click:Connect(function()
            if not brainrotEspEnabled then
                enableBrainrotEsp(brainrotButton, true)
            else
                disableBrainrotEsp(brainrotButton, true)
            end
        end)

        local espButton = Instance.new("TextButton")
        espButton.Size = UDim2.new(0, 250, 0, 40)
        espButton.Position = UDim2.new(0, -35, 0, 60)
        espButton.BackgroundColor3 = espEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        espButton.Text = espEnabled and "Disable ESP" or "Enable ESP"
        espButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        espButton.TextSize = 18
        espButton.Font = Enum.Font.GothamBold
        espButton.Parent = contentFrame
        local buttonCorner = Instance.new("UICorner", espButton)
        buttonCorner.CornerRadius = UDim.new(0, 8)

        espButton.MouseButton1Down:Connect(function()
            TweenService:Create(espButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        espButton.MouseButton1Up:Connect(function()
            if not espEnabled then
                TweenService:Create(espButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        espButton.MouseLeave:Connect(function()
            if not espEnabled then
                TweenService:Create(espButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        espButton.MouseButton1Click:Connect(function()
            if not espEnabled then
                enableESP(espButton, true)
            else
                disableESP(espButton, true)
            end
        end)

        local timerEspButton = Instance.new("TextButton")
        timerEspButton.Size = UDim2.new(0, 250, 0, 40)
        timerEspButton.Position = UDim2.new(0, -35, 0, 110)
        timerEspButton.BackgroundColor3 = timerEspEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        timerEspButton.Text = timerEspEnabled and "Disable Timer ESP" or "Enable Timer ESP"
        timerEspButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        timerEspButton.TextSize = 18
        timerEspButton.Font = Enum.Font.GothamBold
        timerEspButton.Parent = contentFrame
        local timerButtonCorner = Instance.new("UICorner", timerEspButton)
        timerButtonCorner.CornerRadius = UDim.new(0, 8)

        timerEspButton.MouseButton1Down:Connect(function()
            TweenService:Create(timerEspButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        timerEspButton.MouseButton1Up:Connect(function()
            if not timerEspEnabled then
                TweenService:Create(timerEspButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        timerEspButton.MouseLeave:Connect(function()
            if not timerEspEnabled then
                TweenService:Create(timerEspButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        timerEspButton.MouseButton1Click:Connect(function()
            if not timerEspEnabled then
                enableTimerESP(timerEspButton, true)
            else
                disableTimerESP(timerEspButton, true)
            end
        end)

        local webSlingerButton = Instance.new("TextButton")
        webSlingerButton.Size = UDim2.new(0, 250, 0, 40)
        webSlingerButton.Position = UDim2.new(0, -35, 0, -40)
        webSlingerButton.BackgroundColor3 = webSlingerAutoAimEnabled and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(30, 30, 30)
        webSlingerButton.Text = webSlingerAutoAimEnabled and "Disable Web Slinger Auto Aim" or "Enable Web Slinger Auto Aim"
        webSlingerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        webSlingerButton.TextSize = 18
        webSlingerButton.Font = Enum.Font.GothamBold
        webSlingerButton.Parent = contentFrame
        local webSlingerButtonCorner = Instance.new("UICorner", webSlingerButton)
        webSlingerButtonCorner.CornerRadius = UDim.new(0, 8)

        webSlingerButton.MouseButton1Down:Connect(function()
            TweenService:Create(webSlingerButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        webSlingerButton.MouseButton1Up:Connect(function()
            if not webSlingerAutoAimEnabled then
                TweenService:Create(webSlingerButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)
        webSlingerButton.MouseLeave:Connect(function()
            if not webSlingerAutoAimEnabled then
                TweenService:Create(webSlingerButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
            end
        end)

        webSlingerButton.MouseButton1Click:Connect(function()
            if not webSlingerAutoAimEnabled then
                enableWebSlingerAutoAim(webSlingerButton, true)
            else
                disableWebSlingerAutoAim(webSlingerButton, true)
            end
        end)
    elseif name == "Info" then
        local discordButton = Instance.new("TextButton")
        discordButton.Size = UDim2.new(0, 250, 0, 40)
        discordButton.Position = UDim2.new(0, -35, 0, 10)
        discordButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        discordButton.Text = "Copy Discord"
        discordButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        discordButton.TextSize = 18
        discordButton.Font = Enum.Font.GothamBold
        discordButton.Parent = contentFrame
        local buttonCorner = Instance.new("UICorner", discordButton)
        buttonCorner.CornerRadius = UDim.new(0, 8)

        discordButton.MouseButton1Down:Connect(function()
            TweenService:Create(discordButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 220, 70)}):Play()
        end)
        discordButton.MouseButton1Up:Connect(function()
            TweenService:Create(discordButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
        end)
        discordButton.MouseLeave:Connect(function()
            TweenService:Create(discordButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
        end)

        discordButton.MouseButton1Click:Connect(function()
            pcall(function()
                setclipboard("https://discord.gg/aXYUkzDR")
                StarterGui:SetCore("SendNotification", {Title = "Discord", Text = "Link copied to clipboard!", Duration = 3})
            end)
        end)
    end

    return contentFrame
end

tabContents["Main"] = createTabContent("Main")
tabContents["Settings"] = createTabContent("Settings")
tabContents["ESP"] = createTabContent("ESP")
tabContents["Info"] = createTabContent("Info")

local currentTab = "Main"
local function switchTab(tabName)
    for name, frame in pairs(tabContents) do
        frame.Visible = (name == tabName)
    end
end

local opened = settings.guiOpen

local function openGUI()
    opened = true
    settings.guiOpen = true
    saveSettings(settings)

    tabMain.Visible = true
    tabSettings.Visible = true
    tabESP.Visible = true
    tabInfo.Visible = true
    closeButton.Visible = true
    divider.Visible = true
    hubLabel.Visible = true
    tabContents[currentTab].Visible = true

    local tweenInfo = TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)

    nhLabel.TextXAlignment = Enum.TextXAlignment.Left
    nhLabel.TextYAlignment = Enum.TextYAlignment.Top

    local sizeTween = TweenService:Create(mainFrame, tweenInfo, {Size = UDim2.new(0, 400, 0, 300), Position = UDim2.new(0.5, 0, 0.45, 0)})
    local cornerTween = TweenService:Create(mainCorner, tweenInfo, {CornerRadius = UDim.new(0, 18)})
    local nhMoveTween = TweenService:Create(nhLabel, tweenInfo, {Position = UDim2.new(0, 15, 0, 15), Size = UDim2.new(0, 90, 0, 30)})
    local hubMoveTween = TweenService:Create(hubLabel, tweenInfo, {Position = UDim2.new(0, 25, 0, 35), Size = UDim2.new(0, 120, 0, 20)})
    local textTween = TweenService:Create(nhLabel, tweenInfo, {TextTransparency = 1})
    local hubTextTween = TweenService:Create(hubLabel, TweenInfo.new(0.3), {TextTransparency = 0})

    sizeTween:Play()
    cornerTween:Play()
    nhMoveTween:Play()
    hubMoveTween:Play()
    textTween:Play()
    hubTextTween:Play()

    textTween.Completed:Connect(function()
        nhLabel.Text = "Nameless"
        local nameTween = TweenService:Create(nhLabel, TweenInfo.new(0.3), {TextTransparency = 0})
        local hubTween = TweenService:Create(hubLabel, TweenInfo.new(0.3), {TextTransparency = 0})
        nameTween:Play()
        hubTween:Play()
    end)

    local tabFadeIns = {
        TweenService:Create(tabMain, tweenInfo, {BackgroundTransparency = 0, TextTransparency = 0}),
        TweenService:Create(tabSettings, tweenInfo, {BackgroundTransparency = 0, TextTransparency = 0}),
        TweenService:Create(tabESP, tweenInfo, {BackgroundTransparency = 0, TextTransparency = 0}),
        TweenService:Create(tabInfo, tweenInfo, {BackgroundTransparency = 0, TextTransparency = 0}),
        TweenService:Create(closeButton, tweenInfo, {BackgroundTransparency = 0, TextTransparency = 0}),
        TweenService:Create(divider, tweenInfo, {BackgroundTransparency = 0}),
    }

    for _, frame in pairs(tabContents) do
        for _, child in pairs(frame:GetChildren()) do
            if child:IsA("TextButton") then
                table.insert(tabFadeIns, TweenService:Create(child, tweenInfo, {BackgroundTransparency = 0, TextTransparency = 0}))
            end
        end
    end

    for _, tween in ipairs(tabFadeIns) do
        tween:Play()
    end
end

local function closeGUI()
    opened = false
    settings.guiOpen = false
    saveSettings(settings)

    local tweenInfo = TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)

    nhLabel.TextXAlignment = Enum.TextXAlignment.Center
    nhLabel.TextYAlignment = Enum.TextYAlignment.Center

    local sizeTween = TweenService:Create(mainFrame, tweenInfo, {Size = UDim2.new(0, 50, 0, 50), Position = UDim2.new(settings.guiPosition[1], settings.guiPosition[2], settings.guiPosition[3], settings.guiPosition[4])})
    local cornerTween = TweenService:Create(mainCorner, tweenInfo, {CornerRadius = UDim.new(0, 12)})
    local nhResetTween = TweenService:Create(nhLabel, tweenInfo, {Position = UDim2.new(0, 0, 0, 0), Size = UDim2.new(0, 50, 0, 50)})
    local hubResetTween = TweenService:Create(hubLabel, tweenInfo, {Position = UDim2.new(0, 0, 0, 30), Size = UDim2.new(0, 50, 0, 20)})
    local textTween = TweenService:Create(nhLabel, tweenInfo, {TextTransparency = 1})
    local hubTextTween = TweenService:Create(hubLabel, TweenInfo.new(0.3), {TextTransparency = 1})

    textTween:Play()
    hubTextTween:Play()
    textTween.Completed:Connect(function()
        nhLabel.Text = "NH"
        local nameTween = TweenService:Create(nhLabel, TweenInfo.new(0.3), {TextTransparency = 0})
        nameTween:Play()
    end)

    local tabFadeOuts = {
        TweenService:Create(tabMain, tweenInfo, {BackgroundTransparency = 1, TextTransparency = 1}),
        TweenService:Create(tabSettings, tweenInfo, {BackgroundTransparency = 1, TextTransparency = 1}),
        TweenService:Create(tabESP, tweenInfo, {BackgroundTransparency = 1, TextTransparency = 1}),
        TweenService:Create(tabInfo, tweenInfo, {BackgroundTransparency = 1, TextTransparency = 1}),
        TweenService:Create(closeButton, tweenInfo, {BackgroundTransparency = 1, TextTransparency = 1}),
        TweenService:Create(divider, tweenInfo, {BackgroundTransparency = 1}),
    }

    for _, frame in pairs(tabContents) do
        for _, child in pairs(frame:GetChildren()) do
            if child:IsA("TextButton") then
                table.insert(tabFadeOuts, TweenService:Create(child, tweenInfo, {BackgroundTransparency = 1, TextTransparency = 1}))
            end
        end
    end

    for _, tween in ipairs(tabFadeOuts) do
        tween:Play()
    end

    sizeTween:Play()
    cornerTween:Play()
    nhResetTween:Play()
    hubResetTween:Play()

    task.wait(0.55)

    tabMain.Visible = false
    tabSettings.Visible = false
    tabESP.Visible = false
    tabInfo.Visible = false
    closeButton.Visible = false
    divider.Visible = false
    hubLabel.Visible = false
    for _, frame in pairs(tabContents) do
        frame.Visible = false
    end
end

openButton.MouseButton1Click:Connect(function()
    if not opened then
        openGUI()
    end
end)

closeButton.MouseButton1Click:Connect(function()
    if opened then
        closeGUI()
    end
end)

tabMain.MouseButton1Click:Connect(function()
    currentTab = "Main"
    switchTab(currentTab)
end)

tabSettings.MouseButton1Click:Connect(function()
    currentTab = "Settings"
    switchTab(currentTab)
end)

tabESP.MouseButton1Click:Connect(function()
    currentTab = "ESP"
    switchTab(currentTab)
end)

tabInfo.MouseButton1Click:Connect(function()
    currentTab = "Info"
    switchTab(currentTab)
end)
if settings.guiOpen then
    openGUI()
else
    closeGUI()
end

task.wait(1)

if settings.walkspeedEnabled then
    enableWalkspeed(nil, nil, false)
end

if settings.infiniteJumpEnabled then
    enableInfiniteJump(nil, false)
end

if settings.boostJumpEnabled then
    enableBoostJump(nil, false)
end

if settings.espEnabled then
    enableESP(nil, false)
end

if settings.timerEspEnabled then
    enableTimerESP(nil, false)
end

if settings.webSlingerAutoAimEnabled then
    enableWebSlingerAutoAim(nil, false)
end

if settings.antiTrapEnabled then
    enableAntiTrap(nil, false)
end

if settings.antiHitEnabled then
    enableAntiHit(nil, false)
end

if settings.brainrotEspEnabled then
    enableBrainrotEsp(nil, false)
end

if settings.snipeTurretsEnabled then
    enableSnipeTurrets(nil, false)
end

if settings.autoKickEnabled then
    enableAutoKick(nil, false)
end
